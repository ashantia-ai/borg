<?xml version="1.0" ?>
<!-- =================================================================================== -->
<!-- |    This document was autogenerated by xacro from complete_model.urdf.xacro      | -->
<!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | -->
<!-- =================================================================================== -->
<robot name="alice" xmlns:controller="http://playerstage.sourceforge.net/gazebo/xmlschema/#controller" xmlns:interface="http://playerstage.sourceforge.net/gazebo/xmlschema/#interface" xmlns:sensor="http://playerstage.sourceforge.net/gazebo/xmlschema/#sensor" xmlns:xacro="http://www.ros.org/wiki/xacro">
  <!-- Robot base: base_footprint, chassis (Volksbot) and left and right wheel -->
  <!-- This is the wheel radius for the robot height, the one for the odometry is in volksbot_node.cpp  -->
  <!-- base_footprint is a fictitious link(frame) that is on the ground right below base_link origin,
       navigation stack depends on this frame -->
  <link name="base_link_dummy">
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <!--<box size="${base_link_length} ${base_link_width} ${base_link_height}" />-->
        <mesh filename="package://volksbot_driver/meshes/base.stl"/>
      </geometry>
      <material name="grey">
        <color rgba="0.5 0.5 0.5 1"/>
      </material>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <!--<box size="${base_link_length} ${base_link_width} ${base_link_height}" />-->
        <mesh filename="package://volksbot_driver/meshes/base.stl"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="10"/>
      <origin xyz="0 0 0"/>
      <inertia ixx="0.140354110525" ixy="0.0" ixz="0.0" iyy="0.290770717025" iyz="0.0" izz="0.3910831769"/>
    </inertial>
  </link>
  <joint name="base_link_dummy_joint" type="fixed">
    <origin rpy="0 0 0" xyz="-0.24 0 0"/>
    <parent link="base_link"/>
    <child link="base_link_dummy"/>
  </joint>
  <link name="base_footprint"/>
  <joint name="base_footprint_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0 0 0.0925"/>
    <parent link="base_footprint"/>
    <child link="base_link"/>
  </joint>
  <link name="base_link"/>
  <!-- rotate_visual: 0 for right side, 1 for left side -->
  <link name="left_front_wheel_link">
    <visual>
      <origin rpy="1.57079632679 0 3.14159265359" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.06" radius="0.065"/>
        <!--mesh filename="package://volksbot_driver/meshes/wheel.stl" /-->
      </geometry>
      <material name="blackish">
        <color rgba="0.2 0.2 0.2 1"/>
      </material>
    </visual>
    <collision>
      <origin rpy="1.57079632679 0 0" xyz="0 0 0"/>
      <!--<origin xyz="0 0 0" rpy="0 0 0" />-->
      <geometry>
        <!-- using STL for collision to fix http://answers.ros.org/question/2368/gazebo-model-wheels-slip-after-upgrade-to-electric -->
        <cylinder length="0.06" radius="0.065"/>
        &gt;
          
        <!--mesh filename="package://volksbot_driver/meshes/wheel.stl" /-->
      </geometry>
    </collision>
    <inertial>
      <mass value="0.25"/>
      <origin xyz="0 0 0"/>
      <inertia ixx="0.000339062364375" ixy="0.0" ixz="0.0" iyy="0.000339062364375" iyz="0.0" izz="0.000528125"/>
    </inertial>
  </link>
  <!-- friction parameters -->
  <gazebo reference="left_front_wheel_link">
    <!-- Turtlebot: -->
    <mu1 value="1.0"/>
    <mu2 value="1.0"/>
    <kp value="100000000.0"/>
    <kd value="10000.0"/>
    <material value="Gazebo/FlatBlack"/>
  </gazebo>
  <joint name="left_front_wheel_joint" type="continuous">
    <origin rpy="0 0 0" xyz="0 0.235 -0.0275"/>
    <parent link="base_link"/>
    <child link="left_front_wheel_link"/>
    <axis xyz="0 1 0"/>
  </joint>
  <!--xacro:volksbot_wheel name="left_middle" xyz="0 ${axis_length/2} ${wheel_z_offset}" rotate_visual="1" friction="100.0" /-->
  <!-- rotate_visual: 0 for right side, 1 for left side -->
  <link name="left_rear_wheel_link">
    <visual>
      <origin rpy="1.57079632679 0 3.14159265359" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.06" radius="0.065"/>
        <!--mesh filename="package://volksbot_driver/meshes/wheel.stl" /-->
      </geometry>
      <material name="blackish">
        <color rgba="0.2 0.2 0.2 1"/>
      </material>
    </visual>
    <collision>
      <origin rpy="1.57079632679 0 0" xyz="0 0 0"/>
      <!--<origin xyz="0 0 0" rpy="0 0 0" />-->
      <geometry>
        <!-- using STL for collision to fix http://answers.ros.org/question/2368/gazebo-model-wheels-slip-after-upgrade-to-electric -->
        <cylinder length="0.06" radius="0.065"/>
        &gt;
          
        <!--mesh filename="package://volksbot_driver/meshes/wheel.stl" /-->
      </geometry>
    </collision>
    <inertial>
      <mass value="0.25"/>
      <origin xyz="0 0 0"/>
      <inertia ixx="0.000339062364375" ixy="0.0" ixz="0.0" iyy="0.000339062364375" iyz="0.0" izz="0.000528125"/>
    </inertial>
  </link>
  <!-- friction parameters -->
  <gazebo reference="left_rear_wheel_link">
    <!-- Turtlebot: -->
    <mu1 value="0.0"/>
    <mu2 value="0.0"/>
    <kp value="100000000.0"/>
    <kd value="10000.0"/>
    <material value="Gazebo/FlatBlack"/>
  </gazebo>
  <joint name="left_rear_wheel_joint" type="continuous">
    <origin rpy="0 0 0" xyz="-0.48 0.235 -0.0275"/>
    <parent link="base_link"/>
    <child link="left_rear_wheel_link"/>
    <axis xyz="0 1 0"/>
  </joint>
  <!-- rotate_visual: 0 for right side, 1 for left side -->
  <link name="right_front_wheel_link">
    <visual>
      <origin rpy="1.57079632679 0 0.0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.06" radius="0.065"/>
        <!--mesh filename="package://volksbot_driver/meshes/wheel.stl" /-->
      </geometry>
      <material name="blackish">
        <color rgba="0.2 0.2 0.2 1"/>
      </material>
    </visual>
    <collision>
      <origin rpy="1.57079632679 0 0" xyz="0 0 0"/>
      <!--<origin xyz="0 0 0" rpy="0 0 0" />-->
      <geometry>
        <!-- using STL for collision to fix http://answers.ros.org/question/2368/gazebo-model-wheels-slip-after-upgrade-to-electric -->
        <cylinder length="0.06" radius="0.065"/>
        &gt;
          
        <!--mesh filename="package://volksbot_driver/meshes/wheel.stl" /-->
      </geometry>
    </collision>
    <inertial>
      <mass value="0.25"/>
      <origin xyz="0 0 0"/>
      <inertia ixx="0.000339062364375" ixy="0.0" ixz="0.0" iyy="0.000339062364375" iyz="0.0" izz="0.000528125"/>
    </inertial>
  </link>
  <!-- friction parameters -->
  <gazebo reference="right_front_wheel_link">
    <!-- Turtlebot: -->
    <mu1 value="1.0"/>
    <mu2 value="1.0"/>
    <kp value="100000000.0"/>
    <kd value="10000.0"/>
    <material value="Gazebo/FlatBlack"/>
  </gazebo>
  <joint name="right_front_wheel_joint" type="continuous">
    <origin rpy="0 0 0" xyz="0 -0.235 -0.0275"/>
    <parent link="base_link"/>
    <child link="right_front_wheel_link"/>
    <axis xyz="0 1 0"/>
  </joint>
  <!--xacro:volksbot_wheel name="right_middle" xyz="0 ${-axis_length/2} ${wheel_z_offset}" rotate_visual="0" friction="100.0" /-->
  <!-- rotate_visual: 0 for right side, 1 for left side -->
  <link name="right_rear_wheel_link">
    <visual>
      <origin rpy="1.57079632679 0 0.0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.06" radius="0.065"/>
        <!--mesh filename="package://volksbot_driver/meshes/wheel.stl" /-->
      </geometry>
      <material name="blackish">
        <color rgba="0.2 0.2 0.2 1"/>
      </material>
    </visual>
    <collision>
      <origin rpy="1.57079632679 0 0" xyz="0 0 0"/>
      <!--<origin xyz="0 0 0" rpy="0 0 0" />-->
      <geometry>
        <!-- using STL for collision to fix http://answers.ros.org/question/2368/gazebo-model-wheels-slip-after-upgrade-to-electric -->
        <cylinder length="0.06" radius="0.065"/>
        &gt;
          
        <!--mesh filename="package://volksbot_driver/meshes/wheel.stl" /-->
      </geometry>
    </collision>
    <inertial>
      <mass value="0.25"/>
      <origin xyz="0 0 0"/>
      <inertia ixx="0.000339062364375" ixy="0.0" ixz="0.0" iyy="0.000339062364375" iyz="0.0" izz="0.000528125"/>
    </inertial>
  </link>
  <!-- friction parameters -->
  <gazebo reference="right_rear_wheel_link">
    <!-- Turtlebot: -->
    <mu1 value="0.0"/>
    <mu2 value="0.0"/>
    <kp value="100000000.0"/>
    <kd value="10000.0"/>
    <material value="Gazebo/FlatBlack"/>
  </gazebo>
  <joint name="right_rear_wheel_joint" type="continuous">
    <origin rpy="0 0 0" xyz="-0.48 -0.235 -0.0275"/>
    <parent link="base_link"/>
    <child link="right_rear_wheel_link"/>
    <axis xyz="0 1 0"/>
  </joint>
  <link name="base_top"/>
  <joint name="base_top_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0 0 0.0775"/>
    <parent link="base_link_dummy"/>
    <child link="base_top"/>
  </joint>
  <gazebo>
    <plugin filename="libgazebo_ros_diff_drive.so" name="diffdrive">
      <alwaysOn>true</alwaysOn>
      <updateRate>10</updateRate>
      <leftJoint>right_front_wheel_joint</leftJoint>
      <rightJoint>left_front_wheel_joint</rightJoint>
      <wheelSeparation>0.47</wheelSeparation>
      <!--0.47-->
      <wheelDiameter>0.13</wheelDiameter>
      <!--0.13 -->
      <torque>100</torque>
      <commandTopic>cmd_vel</commandTopic>
      <odometryTopic>odom</odometryTopic>
      <odometryFrame>odom</odometryFrame>
      <robotBaseFrame>base_footprint</robotBaseFrame>
      <!--<robotNamespace></robotNamespace>-->
    </plugin>
  </gazebo>
  <!--gazebo>
    <plugin name="volksbot_diffdrive" filename="libgazebo_ros_diffdrive_uos.so">
      <alwaysOn>true</alwaysOn>
      <cmd_vel_topic_name>cmd_vel</cmd_vel_topic_name>
      <odom_topic_name>odom</odom_topic_name>
      <joint_states_topic_name>joint_states</joint_states_topic_name>
      <left_front_wheel_joint>left_front_wheel_joint</left_front_wheel_joint>
      <left_rear_wheel_joint>left_rear_wheel_joint</left_rear_wheel_joint>
      <right_front_wheel_joint>right_front_wheel_joint</right_front_wheel_joint>
      <right_rear_wheel_joint>right_rear_wheel_joint</right_rear_wheel_joint>
      <wheel_separation>${axis_length}</wheel_separation>
      <wheel_diameter>${2*wheel_radius}</wheel_diameter>
      <turning_adaptation>${turning_adaptation}</turning_adaptation>
      <torque>4.0</torque>
      <max_velocity>0.9</max_velocity>
      <updateRate>40.0</updateRate>
    </plugin>
  </gazebo-->
  <!-- Bottom part: black box, laser, xtion and laptop stand -->
  <!-- Bottom cube of alice-->
  <link name="bottom_box">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <inertial>
      <mass value="10"/>
      <origin xyz="0 0 0"/>
      <inertia ixx="1" ixy="0" ixz="0" iyy="1" iyz="0" izz="1"/>
    </inertial>
    <visual name="visual">
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://alice_description/models/box.dae" scale="0.57 0.5 0.335"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://alice_description/models/box.dae" scale="0.57 0.5 0.335"/>
      </geometry>
    </collision>
  </link>
  <!-- Gazebo color plugin for bottom box -->
  <gazebo reference="bottom_box">
    <material>Gazebo/FlatBlack</material>
  </gazebo>
  <!-- Connection between chassis and bottom rectangular box -->
  <joint name="base_to_bottom_box" type="fixed">
    <!--<origin rpy=" 0 0 0" xyz="0.08 0 0.33"/>-->
    <origin rpy=" 0 0 0" xyz="0.0 0 0.1675"/>
    <child link="bottom_box"/>
    <parent link="base_top"/>
  </joint>
  <!-- Middle Connection Bar from bottom box-->
  <link name="middle_bar">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <inertial>
      <mass value="10"/>
      <origin xyz="0 0 0"/>
      <inertia ixx="1" ixy="0" ixz="0" iyy="1" iyz="0" izz="1"/>
    </inertial>
    <visual name="visual">
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://alice_description/models/box.dae" scale="0.02 0.04 0.68"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://alice_description/models/box.dae" scale="0.02 0.04 0.68"/>
      </geometry>
    </collision>
  </link>
  <joint name="bottom_box_to_middle_bar" type="fixed">
    <!-- Connection between Middle bar and bottom rectangular box -->
    <origin rpy="0 0 0" xyz="-0.07 0 0.50"/>
    <child link="middle_bar"/>
    <parent link="bottom_box"/>
  </joint>
  <gazebo reference="middle_bar">
    <material>Gazebo/Grey</material>
  </gazebo>
  <!-- Back Connection Bar from bottom box-->
  <link name="back_bar">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <inertial>
      <mass value="10"/>
      <origin xyz="0 0 0"/>
      <inertia ixx="1" ixy="0" ixz="0" iyy="1" iyz="0" izz="1"/>
    </inertial>
    <visual name="visual">
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://alice_description/models/box.dae" scale="0.02 0.04 0.68"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://alice_description/models/box.dae" scale="0.02 0.04 0.68"/>
      </geometry>
    </collision>
  </link>
  <gazebo reference="back_bar">
    <!-- Gazebo color plugin for bottom box -->
    <material>Gazebo/Grey</material>
  </gazebo>
  <joint name="bottom_box_to_back_bar" type="fixed">
    <!-- Connection between back bar and bottom rectangular box -->
    <origin rpy="0 0 0" xyz="-0.22 0 0.50"/>
    <child link="back_bar"/>
    <parent link="bottom_box"/>
  </joint>
  <!-- Top Horizontal Connection Bar from bottom box-->
  <link name="top_bar">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <inertial>
      <mass value="10"/>
      <origin xyz="0 0 0"/>
      <inertia ixx="1" ixy="0" ixz="0" iyy="1" iyz="0" izz="1"/>
    </inertial>
    <visual name="visual">
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://alice_description/models/box.dae" scale="0.46 0.04 0.02"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://alice_description/models/box.dae" scale="0.46 0.04 0.02"/>
      </geometry>
    </collision>
  </link>
  <joint name="middle_bar_to_top_bar" type="fixed">
    <!-- Connection between chassis and bottom rectangular box -->
    <origin rpy="0 0 0" xyz=" 0.04 0 0.35"/>
    <child link="top_bar"/>
    <parent link="middle_bar"/>
  </joint>
  <gazebo reference="top_bar">
    <!-- Gazebo color plugin for bottom box -->
    <material>Gazebo/Grey</material>
  </gazebo>
  <!-- The SICK laser. The used model is actually hokuyo -->
  <link name="laser">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <inertial>
      <mass value="10"/>
      <origin xyz="0 0 0"/>
      <inertia ixx="1" ixy="0" ixz="0" iyy="1" iyz="0" izz="1"/>
    </inertial>
    <visual name="visual">
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://alice_description/models/hokuyo/meshes/hokuyo.dae"/>
      </geometry>
    </visual>
    <collision>
      <geometry>
        <mesh filename="package://alice_description/models/hokuyo/meshes/hokuyo.dae"/>
      </geometry>
    </collision>
  </link>
  <gazebo reference="laser">
    <sensor name="laser" type="gpu_ray">
      <pose>0 0 0 0 0 0</pose>
      <visualize>true</visualize>
      <update_rate>200</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>720</samples>
            <resolution>1</resolution>
            <min_angle>-1.57</min_angle>
            <max_angle>1.57</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.10</min>
          <max>30.0</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <!-- Noise parameters based on published spec for Hokuyo laser
                 achieving "+-30mm" accuracy at range < 10m.  A mean of 0.0m and
                 stddev of 0.01m will put 99.7% of samples within 0.03m of the true
                 reading. -->
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <!-- Plugin to simulate ros laser topic in gazebo and ros-->
      <plugin filename="libgazebo_ros_gpu_laser.so" name="gazebo_ros_hokuyo_controller">
        <topicName>scan</topicName>
        <frameName>laser</frameName>
      </plugin>
    </sensor>
  </gazebo>
  <joint name="base_top_to_laser_link" type="fixed">
    <!-- Connection between base_top and laser-->
    <!--<origin rpy="0 0 3.14" xyz="-0.2 0 0.15 "/>-->
    <origin rpy="0 0 0" xyz="0.3 0 0.04 "/>
    <child link="laser"/>
    <parent link="base_top"/>
  </joint>
  <!-- Back Xtion -->
  <link name="back_xtion_link">
    <inertial>
      <mass value="0.200"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="5.8083e-4" ixy="0" ixz="0" iyy="3.0833e-5" iyz="0" izz="5.9083e-4"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://alice_description/models/box.dae" scale="0.035 0.18 0.025"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://alice_description/models/box.dae" scale="0.035 0.18 0.025"/>
      </geometry>
    </collision>
  </link>
  <gazebo reference="back_xtion_link">
    <selfCollide>false</selfCollide>
    <static>true</static>
    <turnGravityOff>false</turnGravityOff>
    <sensor name="back_xtion" type="depth">
      <pose>0 0 0 0 0 0</pose>
      <always_on>1</always_on>
      <visualize>true</visualize>
      <camera>
        <horizontal_fov>1.047</horizontal_fov>
        <image>
          <width>320</width>
          <height>240</height>
          <format>R8G8B8</format>
        </image>
        <depth_camera/>
        <clip>
          <near>0.1</near>
          <far>100</far>
        </clip>
      </camera>
      <plugin filename="libgazebo_ros_openni_kinect.so" name="camera_controller">
        <alwaysOn>true</alwaysOn>
        <updateRate>30.0</updateRate>
        <cameraName>back_xtion</cameraName>
        <frameName>back_rgb_optical_link</frameName>
        <imageTopicName>rgb/image_raw</imageTopicName>
        <depthImageTopicName>depth/image_raw</depthImageTopicName>
        <pointCloudTopicName>depth/points</pointCloudTopicName>
        <cameraInfoTopicName>rgb/camera_info</cameraInfoTopicName>
        <depthImageCameraInfoTopicName>depth/camera_info</depthImageCameraInfoTopicName>
        <pointCloudCutoff>0.0</pointCloudCutoff>
        <pointCloudCutoffMax>4.5</pointCloudCutoffMax>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
        <CxPrime>0.0</CxPrime>
        <Cx>0.0</Cx>
        <Cy>0.0</Cy>
        <focalLength>0.0</focalLength>
      </plugin>
    </sensor>
  </gazebo>
  <joint name="top_bar_to_back_xtion" type="fixed">
    <!-- Connection between bottom box and xtion -->
    <origin rpy="0.0 1.17079632679 3.14159265359" xyz="-0.24 -0.0 0.16"/>
    <child link="back_xtion_link"/>
    <parent link="top_bar"/>
  </joint>
  <link name="back_rgb_optical_link"/>
  <joint name="back_xtion_to_rgb_optical" type="fixed">
    <!-- Connection between top bar and front -->
    <origin rpy="-1.57079632679 0 -1.57079632679" xyz="0.00 -0.02 0.00"/>
    <parent link="back_xtion_link"/>
    <child link="back_rgb_optical_link"/>
  </joint>
  <!-- Head: Xtion + motors -->
  <gazebo>
    <plugin filename="libgazebo_ros_control.so" name="gazebo_ros_control">
      <robotNamespace>/alice</robotNamespace>
    </plugin>
  </gazebo>
  <!-- Dynamixel stand-->
  <joint name="head_stand_joint" type="fixed">
    <!-- Connection between chassis and bottom rectangular box -->
    <origin rpy="0 0.04 0" xyz=" 0.24 0.0 0.01"/>
    <parent link="top_bar"/>
    <child link="head_stand_link"/>
  </joint>
  <link name="head_stand_link">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <inertial>
      <mass value="10"/>
      <origin xyz="0 0 0"/>
      <inertia ixx="1" ixy="0" ixz="0" iyy="1" iyz="0" izz="1"/>
    </inertial>
    <visual name="visual">
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://alice_description/models/box.dae" scale="0.065 0.04 0.04"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://alice_description/models/box.dae" scale="0.065 0.04 0.04"/>
      </geometry>
    </collision>
  </link>
  <gazebo reference="head_stand_link">
    <material>Gazebo/FlatBlack</material>
    <turnGravityOff>false</turnGravityOff>
    <selfCollide>true</selfCollide>
    <mu1>100.0</mu1>
    <mu2>100.0</mu2>
    <kp>1000000.0</kp>
    <kd>1.0</kd>
  </gazebo>
  <!-- First Left to Right Dynamixel -->
  <joint name="head_yaw_joint" type="revolute">
    <origin rpy="0 0 0" xyz=" 0.023 0 0.04"/>
    <parent link="head_stand_link"/>
    <child link="head_yaw_link"/>
    <axis xyz="0 0 1"/>
    <limit effort="10" lower="-1.57079632679" upper="1.57079632679" velocity="0.8726646"/>
    <dynamics damping="50.5"/>
  </joint>
  <transmission name="head_yaw_joint_transmission">
    <type>transmission_interface/SimpleTransmission</type>
    <actuator name="head_yaw_joint_motor">
      <hardwareInterface>EffortJointInterface</hardwareInterface>
      <mechanicalReduction>50</mechanicalReduction>
    </actuator>
    <joint name="head_yaw_joint">
      <hardwareInterface>EffortJointInterface</hardwareInterface>
    </joint>
    <mechanicalReduction>50</mechanicalReduction>
    <motorTorqueConstant>1</motorTorqueConstant>
    <pulsesPerRevolution>10000</pulsesPerRevolution>
  </transmission>
  <link name="head_yaw_link">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <inertial>
      <origin xyz="0 0 0"/>
      <mass value="0.25"/>
      <inertia ixx="1" ixy="0" ixz="0" iyy="1" iyz="0" izz="1"/>
    </inertial>
    <visual name="visual">
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://alice_description/models/box.dae" scale="0.05 0.03 0.03"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://alice_description/models/box.dae" scale="0.05 0.03 0.03"/>
      </geometry>
    </collision>
  </link>
  <gazebo reference="head_yaw_link">
    <material>Gazebo/FlatBlack</material>
    <turnGravityOff>false</turnGravityOff>
    <selfCollide>true</selfCollide>
    <mu1>100.0</mu1>
    <mu2>100.0</mu2>
    <kp>1000000.0</kp>
    <kd>1.0</kd>
  </gazebo>
  <!-- Second Up to Down Dynamixel -->
  <joint name="head_pitch_joint" type="revolute">
    <origin rpy="1.57079632679 -0.04 0.0" xyz=" 0.0225 0 0.025"/>
    <parent link="head_yaw_link"/>
    <child link="head_pitch_link"/>
    <axis xyz="0 0 1"/>
    <limit effort="200" lower="0.0" upper="3.14159265359" velocity="0.8726646"/>
    <dynamics damping="50.5"/>
  </joint>
  <transmission name="head_pitch_joint_transmission">
    <type>transmission_interface/SimpleTransmission</type>
    <actuator name="head_pitch_joint_motor">
      <hardwareInterface>EffortJointInterface</hardwareInterface>
      <mechanicalReduction>50</mechanicalReduction>
    </actuator>
    <joint name="head_pitch_joint">
      <hardwareInterface>EffortJointInterface</hardwareInterface>
    </joint>
    <mechanicalReduction>50</mechanicalReduction>
    <motorTorqueConstant>1</motorTorqueConstant>
    <pulsesPerRevolution>10000</pulsesPerRevolution>
  </transmission>
  <link name="head_pitch_link">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <inertial>
      <mass value="10"/>
      <origin xyz="0 0 0"/>
      <inertia ixx="1" ixy="0" ixz="0" iyy="1" iyz="0" izz="1"/>
    </inertial>
    <visual name="visual">
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://alice_description/models/box.dae" scale="0.05 0.03 0.03"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://alice_description/models/box.dae" scale="0.05 0.03 0.03"/>
      </geometry>
    </collision>
  </link>
  <gazebo reference="head_pitch_link">
    <material>Gazebo/FlatBlack</material>
    <turnGravityOff>false</turnGravityOff>
    <selfCollide>true</selfCollide>
    <mu1>100.0</mu1>
    <mu2>100.0</mu2>
    <kp>1000000.0</kp>
    <kd>1.0</kd>
  </gazebo>
  <!-- Front Xtion -->
  <link name="front_xtion_link">
    <inertial>
      <mass value="0.200"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="5.8083e-4" ixy="0" ixz="0" iyy="3.0833e-5" iyz="0" izz="5.9083e-4"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://alice_description/models/box.dae" scale="0.035 0.18 0.025"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://alice_description/models/box.dae" scale="0.035 0.18 0.025"/>
      </geometry>
    </collision>
  </link>
  <!-- Gazebo color plugin for xtion -->
  <gazebo reference="front_xtion_link">
    <selfCollide>false</selfCollide>
    <static>true</static>
    <turnGravityOff>false</turnGravityOff>
    <sensor name="front_xtion" type="depth">
      <pose>0 0 0 0 0 0</pose>
      <always_on>1</always_on>
      <visualize>true</visualize>
      <camera>
        <horizontal_fov>1.047</horizontal_fov>
        <image>
          <width>320</width>
          <height>240</height>
          <format>R8G8B8</format>
        </image>
        <depth_camera/>
        <clip>
          <near>0.1</near>
          <far>100</far>
        </clip>
      </camera>
      <plugin filename="libgazebo_ros_openni_kinect.so" name="camera_controller">
        <alwaysOn>true</alwaysOn>
        <updateRate>30.0</updateRate>
        <cameraName>front_xtion</cameraName>
        <frameName>front_rgb_optical_link</frameName>
        <imageTopicName>rgb/image_raw</imageTopicName>
        <depthImageTopicName>depth/image_raw</depthImageTopicName>
        <pointCloudTopicName>depth/points</pointCloudTopicName>
        <cameraInfoTopicName>rgb/camera_info</cameraInfoTopicName>
        <depthImageCameraInfoTopicName>depth/camera_info</depthImageCameraInfoTopicName>
        <pointCloudCutoff>0.0</pointCloudCutoff>
        <pointCloudCutoffMax>4.5</pointCloudCutoffMax>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
        <CxPrime>0.0</CxPrime>
        <Cx>0.0</Cx>
        <Cy>0.0</Cy>
        <focalLength>0.0</focalLength>
      </plugin>
    </sensor>
  </gazebo>
  <joint name="head_pitch_to_front_xtion" type="fixed">
    <!-- Connection between top bar and front -->
    <origin rpy=" -1.57079632679 0.0 -1.57079632679" xyz="0.06 0.0 -0.02"/>
    <child link="front_xtion_link"/>
    <parent link="head_pitch_link"/>
  </joint>
  <link name="front_rgb_optical_link"/>
  <joint name="front_xtion_to_rgb_optical" type="fixed">
    <!-- Connection between top bar and front -->
    <origin rpy="-1.57079632679 0 -1.57079632679" xyz="0.00 -0.02 0.00"/>
    <parent link="front_xtion_link"/>
    <child link="front_rgb_optical_link"/>
  </joint>
  <!-- The top laser. The used model is actually hokuyo -->
  <link name="top_laser">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <inertial>
      <mass value="10"/>
      <origin xyz="0 0 0"/>
      <inertia ixx="1" ixy="0" ixz="0" iyy="1" iyz="0" izz="1"/>
    </inertial>
    <visual name="visual">
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://alice_description/models/hokuyo/meshes/hokuyo.dae"/>
      </geometry>
    </visual>
    <collision>
      <geometry>
        <mesh filename="package://alice_description/models/hokuyo/meshes/hokuyo.dae"/>
      </geometry>
    </collision>
  </link>
  <gazebo reference="top_laser">
    <sensor name="top_laser" type="gpu_ray">
      <pose>0 0 0 0 0 0</pose>
      <visualize>true</visualize>
      <update_rate>200</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>720</samples>
            <resolution>1</resolution>
            <min_angle>-1.57</min_angle>
            <max_angle>1.57</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.10</min>
          <max>30.0</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <!-- Noise parameters based on published spec for Hokuyo laser
                 achieving "+-30mm" accuracy at range < 10m.  A mean of 0.0m and
                 stddev of 0.01m will put 99.7% of samples within 0.03m of the true
                 reading. -->
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <!-- Plugin to simulate ros laser topic in gazebo and ros-->
      <plugin filename="libgazebo_ros_gpu_laser.so" name="gazebo_ros_hokuyo_controller">
        <topicName>/top_scan</topicName>
        <frameName>top_laser</frameName>
      </plugin>
    </sensor>
  </gazebo>
  <joint name="head_stand_top_laser_link" type="fixed">
    <!-- Connection between head_yaw_link and top_laser-->
    <origin rpy="0 0 0" xyz="-0.22 0.0 -0.05"/>
    <child link="top_laser"/>
    <parent link="head_stand_link"/>
  </joint>
  <!-- Arm currently not used-->
  <!-- Mico arm: piece of wood and arm -->
  <!--xacro:include filename="$(find alice_description)/urdf/complete_model_mico_arm.urdf.xacro" /-->
</robot>

