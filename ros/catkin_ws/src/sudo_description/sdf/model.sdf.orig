<?xml version="1.0"?>
<sdf version="1.4">
  <model name="sudo">
    <!-- Pioneer 2 Chassis-->
    <link name="chassis">
	<sensor name='chassis_contact' type='contact'>
	  <update_rate>30</update_rate>
          <contact>
            <collision>collision</collision>
          </contact>
	  <plugin name="contact_sensor" filename="libcontact.so"/>
        </sensor>
      <pose>0 0 0.16 0 0 0</pose>
      <inertial>
        <mass>13.0</mass>
      </inertial>
      <collision name="collision">
        <geometry>
          <box>
            <size>0.445 0.38 0.17</size>
          </box>
        </geometry>
      </collision>
      <collision name="castor_collision">
        <pose>-0.200 0 -0.12 0 0 0</pose>
        <geometry>
          <sphere>
            <radius>0.04</radius>
          </sphere>
        </geometry>
        <surface>
          <friction>
            <ode>
              <mu>0</mu>
              <mu2>0</mu2>
              <slip1>1.0</slip1>
              <slip2>1.0</slip2>
            </ode>
          </friction>
        </surface>
      </collision>
      <visual name="visual">
        <pose>0 0 0.04 0 0 0</pose>
        <geometry>
          <mesh>
            <uri>model://pioneer2dx/meshes/chassis.dae</uri>
          </mesh>
        </geometry>
      </visual>
      <visual name="castor_visual">
        <pose>-0.200 0 -0.12 0 0 0</pose>
        <geometry>
          <sphere>
            <radius>0.04</radius>
          </sphere>
        </geometry>
        <material>
          <script>
            <uri>file://media/materials/scripts/gazebo.material</uri>
            <name>Gazebo/FlatBlack</name>
          </script>
        </material>
      </visual>
    </link>
    <!-- Bottom cube of Sudo-->
    <link name="bottom_body_box">
      <pose>0.04 0 0.48 0 0 0</pose>
      <inertial>
        <mass>2.0</mass>
      </inertial>
      <collision name="collision">
        <geometry>
          <box>
            <size>0.315 0.38 0.42</size>
          </box>
        </geometry>
      </collision>
      <visual name="visual">
        <geometry>
          <box>
            <size>0.315 0.38 0.42</size>
          </box>
        </geometry>
        <material>
          <script>
            <uri>file://media/materials/scripts/gazebo.material</uri>
            <name>Gazebo/FlatBlack</name>
          </script>
        </material>
      </visual> 
    </link>
    <!-- Top long part of sudo-->
    <link name="top_body_box">
      <pose>0.04 0 1.25 0 0 0</pose>
      <inertial>
        <mass>4.0</mass>
      </inertial>
      <collision name="collision">
        <geometry>
          <box>
            <size>0.05 0.38 1.13</size>
          </box>
        </geometry>
      </collision>
      <visual name="visual">

        <geometry>
          <box>
            <size>0.05 0.38 1.13</size>
          </box>
        </geometry>
        <material>
          <script>
            <uri>file://media/materials/scripts/gazebo.material</uri>
            <name>Gazebo/FlatBlack</name>
          </script>
        </material>
      </visual> 
    </link>
    <!-- Small webcam that Amir uses for Navigation-->
    <link name="webcam">
      <pose>0.2 0 0.77 0 0 0</pose>
      <inertial>
        <mass>0.1</mass>
      </inertial>
      <collision name="collision">
        <geometry>
          <box>
            <size> 0.029 0.068 0.040</size>
          </box>
        </geometry>
      </collision>
      <visual name="visual">
        <geometry>
          <box>
            <size>0.029 0.068 0.040</size>
          </box>
        </geometry>
      </visual>
      <sensor name="camera" type="camera">
        <camera>
          <horizontal_fov>1.047</horizontal_fov>
          <image>
            <width>320</width>
            <height>240</height>
          </image>
          <clip>
            <near>0.05</near>
            <far>100</far>
          </clip>
        </camera>
        <always_on>1</always_on>
        <update_rate>30</update_rate>
        <visualize>false</visualize>
        <!-- Plugin to simulate camera image topic in gazebo and ros-->
        <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
	        <alwaysOn>true</alwaysOn>
	        <updateRate>30.0</updateRate>
	        <cameraName>sudo/bottom_webcam</cameraName>
	        <imageTopicName>image_raw</imageTopicName>
	        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
	        <frameName>webcam_link</frameName>
	        <!--hackBaseline>0.07</hackBaseline>
	        <distortionK1>0.0</distortionK1>
	        <distortionK2>0.0</distortionK2>
	        <distortionK3>0.0</distortionK3>
	        <distortionT1>0.0</distortionT1>
	        <distortionT2>0.0</distortionT2-->
      </plugin>
      </sensor>
    </link>
    <!-- The link for bottom kinect-->
    <link name="kinect_bottom">
      <pose>0.2 0 1.62 0 1.24 0</pose>
      <inertial>
        <mass>0.1</mass>
      </inertial>

      <collision name="collision">
        <geometry>
          <box>
            <size>0.073000 0.276000 0.072000</size>
          </box>
        </geometry>
      </collision>
      <visual name="visual">
        <geometry>
          <mesh>
            <uri>model://kinect/meshes/kinect.dae</uri>
          </mesh>
        </geometry>
      </visual>
      <sensor name="camera" type="depth">
        <update_rate>20</update_rate>
        <camera name="kinect_bottom">
          <horizontal_fov>1.047198</horizontal_fov>
          <image>
            <width>640</width>
            <height>480</height>
            <format>R8G8B8</format>
          </image>
          <clip>
            <near>0.05</near>
            <far>3</far>
          </clip>
          
        </camera>
        <visualize>true</visualize>
        <!-- Plugin to simulate openni kinect topic in gazebo and ros-->
       	<plugin name="${link_name}_controller" filename="libgazebo_ros_openni_kinect.so">
		    <baseline>0.2</baseline>
		    <alwaysOn>true</alwaysOn>
		    <updateRate>30.0</updateRate>
		    <cameraName>kinect_bottom</cameraName>
		    <imageTopicName>/kinect_bottom/rgb/image_raw</imageTopicName>
		    <cameraInfoTopicName>/kinect_bottom/rgb/camera_info</cameraInfoTopicName>
		    <depthImageTopicName>/kinect_bottom/depth/image_raw</depthImageTopicName>
		    <depthImageCameraInfoTopicName>/kinect_bottom/depth/camera_info</depthImageCameraInfoTopicName>
		    <pointCloudTopicName>/kinect_bottom/depth/points</pointCloudTopicName>
		    <frameName>camera_link</frameName>
		    <visualize>true</visualize>
		    <pointCloudCutoff>0.001</pointCloudCutoff>
		    <!--distortionK1>0.00000001</distortionK1>
		    <distortionK2>0.00000001</distortionK2>
		    <distortionK3>0.00000001</distortionK3>
		    <distortionT1>0.00000001</distortionT1>
		    <distortionT2>0.00000001</distortionT2-->
		    <CxPrime>0</CxPrime>
		    <Cx>0</Cx>
		    <Cy>0</Cy>
		    <focalLength>0</focalLength>
		    <hackBaseline>0</hackBaseline>
  		</plugin>
      </sensor>
    </link>
    <!-- The link for top kinect-->
    <link name="kinect_top">
      <pose>0.07 0 1.85 0 0.33 0</pose>
      <inertial>
        <mass>0.1</mass>
      </inertial>

      <collision name="collision">
        <geometry>
          <box>
            <size>0.073000 0.276000 0.072000</size>
          </box>
        </geometry>
      </collision>
      <visual name="visual">
        <geometry>
          <mesh>
            <uri>model://kinect/meshes/kinect.dae</uri>
          </mesh>
        </geometry>
      </visual>
      <sensor name="camera" type="depth">
        <update_rate>20</update_rate>
        <camera name="kinect_top">
          <horizontal_fov>1.047198</horizontal_fov>
          <image>
            <width>640</width>
            <height>480</height>
            <format>R8G8B8</format>
          </image>
          <clip>
            <near>0.05</near>
            <far>3</far>
          </clip>
        </camera>
        <visualize>true</visualize>
        <!-- Plugin to simulate Openni kinect topic in gazebo and ros-->
        <plugin name="${link_name}_controller" filename="libgazebo_ros_openni_kinect.so">
		    <baseline>0.2</baseline>
		    <alwaysOn>true</alwaysOn>
		    <updateRate>30.0</updateRate>
		    <cameraName>kinect_top</cameraName>
		    <imageTopicName>/kinect_top/rgb/image_raw</imageTopicName>
		    <cameraInfoTopicName>/kinect_top/rgb/camera_info</cameraInfoTopicName>
		    <depthImageTopicName>/kinect_top/depth/image_raw</depthImageTopicName>
		    <depthImageCameraInfoTopicName>/kinect_top/depth/camera_info</depthImageCameraInfoTopicName>
		    <pointCloudTopicName>/kinect_top/depth/points</pointCloudTopicName>
		    <frameName>camera2_link</frameName>
		    <visualize>true</visualize>
		    <pointCloudCutoff>0.001</pointCloudCutoff>
		    <!--distortionK1>0.00000001</distortionK1>
		    <distortionK2>0.00000001</distortionK2>
		    <distortionK3>0.00000001</distortionK3>
		    <distortionT1>0.00000001</distortionT1>
		    <distortionT2>0.00000001</distortionT2-->
		    <CxPrime>0</CxPrime>
		    <Cx>0</Cx>
		    <Cy>0</Cy>
		    <focalLength>0</focalLength>
		    <hackBaseline>0</hackBaseline>
  		</plugin>
      </sensor>
    </link>
    <!-- The link for sick laser. The used model is actually hokoyu-->
    <link name="sick_laser">
      <pose>-0.2 0 0.3 0 0 3.14</pose>
      <inertial>
        <mass>5</mass>
      </inertial>
      <visual name="visual">
        <geometry>
          <mesh>
            <uri>model://hokuyo/meshes/hokuyo.dae</uri>
          </mesh>
        </geometry>
      </visual>

      <collision name="collision-base">
        <pose>0 0 -0.0145 0 0 0</pose>
        <geometry>
          <box>
            <size>0.05 0.05 0.041</size>
          </box>
        </geometry>
      </collision>

      <collision name="collision-top">
        <pose>0 0 0.0205 0 0 0</pose>
        <geometry>
          <cylinder>
            <radius>0.021</radius>
            <length>0.029</length>
          </cylinder>
        </geometry>
      </collision>


      <sensor type="gpu_ray" name="head_hokuyo_sensor">
        <pose>0 0 0 0 0 0</pose>
        <visualize>false</visualize>
        <update_rate>10</update_rate>
        <ray>
          <scan>
            <horizontal>
              <samples>180</samples>
              <resolution>1</resolution>
              <min_angle>-1.7</min_angle>
              <max_angle>1.7</max_angle>
            </horizontal>
          </scan>
          <range>
            <min>0.10</min>
            <max>10.0</max>
            <resolution>0.01</resolution>
          </range>
          <noise>
            <type>gaussian</type>
            <!-- Noise parameters based on published spec for Hokuyo laser
                 achieving "+-30mm" accuracy at range < 10m.  A mean of 0.0m and
                 stddev of 0.01m will put 99.7% of samples within 0.03m of the true
                 reading. -->
            <mean>0.0</mean>
            <stddev>0.01</stddev>
          </noise>
        </ray>
        <!-- Plugin to simulate ros laser topic in gazebo and ros-->
        <plugin name="gazebo_ros_head_hokuyo_controller" filename="libgazebo_ros_gpu_laser.so">
          <topicName>/sudo/laser/scan</topicName>
          <frameName>laser_link</frameName>
        </plugin>
      </sensor>
    </link>
    
    <link name="right_wheel">
      <pose>0.1 -.17 0.11 0 1.5707 1.5707</pose>
      <inertial>
        <mass>0.1</mass>
      </inertial>
      <collision name="collision">
        <geometry>
          <cylinder>
            <radius>0.11</radius>
            <length>0.05</length>
          </cylinder>
        </geometry>
        <surface>
          <friction>
            <ode>
              <mu>100000.0</mu>
              <mu2>100000.0</mu2>
              <slip1>0.0</slip1>
              <slip2>0.0</slip2>
            </ode>
          </friction>
        </surface>
      </collision>
      <visual name="visual">
        <geometry>
          <cylinder>
            <radius>0.11</radius>
            <length>0.05</length>
          </cylinder>
        </geometry>
        <material>
          <script>
            <uri>file://media/materials/scripts/gazebo.material</uri>
            <name>Gazebo/FlatBlack</name>
          </script>
        </material>
      </visual>
    </link>
    
    <link name="left_wheel">
      <pose>0.1 .17 0.11 0 1.5707 1.5707</pose>
      <inertial>
        <mass>0.5</mass>
      </inertial>
      <collision name="collision">
        <geometry>
          <cylinder>
            <radius>0.11</radius>
            <length>0.05</length>
          </cylinder>
        </geometry>
        <surface>
          <friction>
            <ode>
              <mu>100000.0</mu>
              <mu2>100000.0</mu2>
              <slip1>0.0</slip1>
              <slip2>0.0</slip2>
            </ode>
          </friction>
        </surface>
      </collision>
      <visual name="visual">
        <geometry>
          <cylinder>
            <radius>0.11</radius>
            <length>0.05</length>
          </cylinder>
        </geometry>
        <material>
          <script>
            <uri>file://media/materials/scripts/gazebo.material</uri>
            <name>Gazebo/FlatBlack</name>
          </script>
        </material>
      </visual>
    </link>
    
    <joint type="revolute" name="left_wheel_hinge">
      <pose>0 0 0.03 0 0 0</pose>
      <child>left_wheel</child>
      <parent>chassis</parent>
      <axis>
        <xyz>0 1 0</xyz>
      </axis>
    </joint>
    <joint type="revolute" name="right_wheel_hinge">
      <pose>0 0 -0.03 0 0 0</pose>
      <child>right_wheel</child>
      <parent>chassis</parent>
      <axis>
        <xyz>0 1 0</xyz>
      </axis>
    </joint>
    
    <!-- Connection between chassis and bottom rectangular box-->
    <joint type="revolute" name="chassis_to_bottom">
      <pose>0 0 0.16 0 0 0</pose>
      <child>bottom_body_box</child>
      <parent>chassis</parent>
      <axis>
        <xyz>1 0 0</xyz>
        <limit>
	      <upper>0</upper>
	      <lower>0</lower>
   	    </limit>
      </axis>

    </joint>
    <!-- Connection between chassis and laser-->
    <joint type="revolute" name="laser_to_chassis">
      <pose>-0.15 0 0.3 0 0 3.14</pose>
      <child>sick_laser</child>
      <parent>chassis</parent>
      <axis>
        <xyz>0 0 1</xyz>
        <limit>
	      <upper>0</upper>
	      <lower>0</lower>
   	    </limit>
      </axis>
    </joint>
    
    <!-- Connection between top and bottom rectangular boxes-->
    <joint type="revolute" name="bottom_to_top">
      <pose>0 0 0.7 0 0 0</pose>
      <child>top_body_box</child>
      <parent>bottom_body_box</parent>
      <axis>
        <xyz>1 0 0</xyz>
        <limit>
	      <upper>0</upper>
	      <lower>0</lower>
   	    </limit>
      </axis>
    </joint>
    
    <!-- Connection between webcam and bottom rectangular box-->
    <joint type="revolute" name="bottom_to_webcam">
      <pose>0.2 0 0.77 0 0 0</pose>
      <child>webcam</child>
      <parent>bottom_body_box</parent>
      <axis>
        <xyz>0 0 1</xyz>
        <limit>
	      <upper>0</upper>
	      <lower>0</lower>
   	    </limit>
      </axis>
    </joint>
    
    <!-- Connection between bottom kinect and top body-->
    <joint type="revolute" name="bottom_kinect_to_top_body">
      <pose>0.07 0 1.85 0 0.33 0</pose>
      <child>kinect_top</child>
      <parent>top_body_box</parent>
      <axis>
        <xyz>0 1 0</xyz>
        <limit>
	      <upper>0</upper>
	      <lower>0</lower>
   	    </limit>
      </axis>
    </joint>

    <!-- Connection between top kinect and top body-->
    <joint type="revolute" name="top_kinect_to_top_body">
      
      <pose>0.2 0 1.62 0 1.24 0</pose>
      <child>kinect_bottom</child>
      <parent>top_body_box</parent>
      <axis>
        <xyz>0 1 0</xyz>
        <limit>
	      <upper>0</upper>
	      <lower>0</lower>
   	    </limit>
      </axis>
    </joint>
    
	<!-- Make Sudo Move-->
    <plugin filename="libgazebo_ros_diff_drive.so" name="diff_drive">
      <leftJoint>right_wheel_hinge</leftJoint>
      <rightJoint>left_wheel_hinge</rightJoint>
      <wheelSeparation>0.32</wheelSeparation>
      <wheelDiameter>0.16</wheelDiameter>
      <torque>25</torque>
      <topicName>/cmd_vel</topicName>
      <robotBaseFrame>base_link</robotBaseFrame>
    </plugin>

  </model>
</sdf>
